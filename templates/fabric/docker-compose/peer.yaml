  peer{{INDEX}}_{{ZJHL_DOMAIN}}:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
      placement:
        constraints:
          - node.hostname == {{MACHINE_NAME}}
    image: hyperledger/fabric-peer:${FABRIC_IMAGE_TAG}
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_${NETWORK_NAME}
      - CORE_LOGGING_LEVEL=${LOG_LEVEL}
      # enable couchdb
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb{{INDEX}}.{{ZJHL_DOMAIN}}.com:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
      # gossip
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_PROFILE_ENABLED=true
      # - FABRIC_CFG_PATH=/etc/hyperledger/fabric
      - CORE_PEER_LOCALMSPID={{ZJHL_DOMAIN}}MSP
      - CORE_PEER_MSPCONFIGPATH=/var/peers-config/peer{{INDEX}}.{{ZJHL_DOMAIN}}.com/msp
      # enable tls
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_KEY_FILE=/var/peers-config/peer{{INDEX}}.{{ZJHL_DOMAIN}}.com/tls/server.key
      - CORE_PEER_TLS_CERT_FILE=/var/peers-config/peer{{INDEX}}.{{ZJHL_DOMAIN}}.com/tls/server.crt
      - CORE_PEER_TLS_ROOTCERT_FILE=/var/peers-config/peer{{INDEX}}.{{ZJHL_DOMAIN}}.com/tls/ca.crt
      - CORE_PEER_ID=peer{{INDEX}}.{{ZJHL_DOMAIN}}.com
      - CORE_PEER_ADDRESS=peer{{INDEX}}.{{ZJHL_DOMAIN}}.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer{{INDEX}}.{{ZJHL_DOMAIN}}.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer{{INDEX}}.{{ZJHL_DOMAIN}}.com:7051
      # deploy 商务网络卡时 timeout 的对策
      - CORE_CHAINCODE_STARTUPTIMEOUT=600s
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    volumes:
      - /var/run/:/host/var/run/
      - {{ZJHL_DOMAIN}}_peers_volume:/var/peers-config:readonly
# version3.2 之后，支持长格式配置
        # type 默认是 bind ，不会主动创建本地目录
      - type: volume
        # source 需要顶级 volume 中定义的数据卷支持，暂时无法指定目录
        #   ledgersData/
        #       chains/
        #           chains/
        #               各 ledger 的 blockfile 目录，使用文件系统实现
        #               子目录以 ledgerid 为名
        #               blockfile 以 blockfile_ 为前缀，默认大小 64M
        #           index/
        #               各 ledger 的索引目录，采用 leveldb 实现
        #       stateLeveldb/
        #           存储智能合约 putstate 写入的数据的 levelDB 数据库
        #       historyLeveldb/
        #           存储智能合约中写入的 key 的历史记录的索引地址
        #           只存储 block 中有效交易相关的 key ，不存储 value
        #           后续需要查询的时候，根据变动历史去查询实际变动的值，这样的做法减少了数据的存储，也增加了查询逻辑的复杂度
        #       ledgerProvider/
        #           存储当前节点所包含 channel 的信息（已创建和正在创建中的 channel id ）
        #           主要是为 Fabric 的多 channel 机制服务
        source: ledgers_data
        target: /var/hyperledger/production/ledgersData
#        volume:
#          # （ volume 创建时）是否（默认）从容器内部向外拷贝文件
#          nocopy: false
    command: peer node start
    # depends_on:
    #   - couchdb{{INDEX}}.{{ZJHL_DOMAIN}}.com
# depends_on 只是等待依赖项启动，不会等待依赖项准备完毕
# docker-compose up/run 支持 depends_on
#     version2:
#         在 command 中使用依赖判定脚本阻塞、等待
#         指定被依赖服务的 healthcheck ，然后 depends_on: {serveice: {condition: service_healthy/service_started}}
# docker stack deploy 不支持 depends_on: serveice: condition
#     version3:
#         官方推荐做法：自动重启不应该等待
    ports:
      - "{{(INDEX*10+7051)}}:7051"
      - "{{(INDEX*10+7053)}}:7053"
# Needed when docker stack deploy, I don't know why.
    hostname: peer{{INDEX}}.{{ZJHL_DOMAIN}}.com
    networks:
      {{NETWORK_NAME}}:
        aliases:
          - peer{{INDEX}}.{{ZJHL_DOMAIN}}.com